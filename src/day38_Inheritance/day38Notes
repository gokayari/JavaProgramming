
IS A relation vs HAS A relation:

	IS A:
		class Animal{

		}

		class Dog extends Animal{  // Dog IS A animal

		}


		class Employee{

		}

		class Tester extends Employee{ // Tester IS A Employee

		}


	HAS A:

		class Tester extends Employee{

		}

		class ScrumTeam{ // ScrumTeam HAS A Tester
			Tester
		}

		class Tiger extends Animal{ // Tiger IS A animal

		}

		class Zoo{  // Zoo Has A Tiger
			Tiger
		}



		class Engine{

		}

		class Car{ // Car HAS A Engine
            Engine
		}


Method Overloading: multiple different methods having the same name.
					parameters MUST be different

					ANY method can be overloaded


Method Overriding:



Access Modifiers:

	public > protected > default > private



Object Class: presented in "java.lang" package.
			  parent of all the classes.
			  implicitly extended to all classes



Tomorrow:
	OOP Encapsulation
	OOP Inheritance


-----------------------------

Car:
	start(){car started}

Toyota extends Car:
	start():
		twist the key to Ignition

Audi extends Car:
	start():
		push start button

Tesla extends Car:
	start():
		say "Start"


BMW extends Car:
	start():
		Call mechanic
		Jump start
